searchState.loadedDescShard("sui_keys", 0, "Ed25519 follows SLIP-0010 using hardened path: m/44’/784…\nAn address or an alias associated with a key in the wallet …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nRead from file as Base64 encoded <code>privkey</code> and return a …\nRead a SuiKeyPair from a file. The content could be any of …\nRead from file as Base64 encoded <code>flag || privkey</code> and …\nRead from file as Base64 encoded <code>flag || privkey</code> and …\nWrite Base64 encoded <code>privkey</code> to file.\nWrite Base64 encoded <code>flag || privkey</code> to file.\nReturn an array of <code>SuiAddress</code>, consisting of every address …\nReturn an array of <code>SuiAddress</code>, consisting of every address …\nReturn an array of (&amp;SuiAddress, &amp;Alias), consisting of …\nReturn an array of (&amp;SuiAddress, &amp;Alias), consisting of …\nCheck if an alias exists by its name\nCheck if an alias exists by its name\nReturn an array of <code>Alias</code>, consisting of every alias …\nReturn an array of <code>Alias</code>, consisting of every alias …\nReturn an array of <code>Alias</code>, consisting of every alias and …\nGet all aliases objects\nMutable references to each alias in the keystore.\nMutable references to each alias in the keystore.\nReturn an array of <code>Alias</code>, consisting of every alias and …\nReturns an alias string. Optional string can be passed, …\nReturns an alias string. Optional string can be passed, …\nThis function returns an error if the provided alias …\nThis function returns an error if the provided alias …\nReturn an array of <code>PublicKey</code>, consisting of every public …\nReturn an array of <code>PublicKey</code>, consisting of every public …\nReturn <code>SuiKeyPair</code> for the given address.\nReturn <code>SuiKeyPair</code> for the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new keypair and add it into the keystore.\nGenerate a new keypair and add it into the keystore.\nGet the alias of an address.\nGet the alias of an address.\nGet the alias if it exists, or return an error if it does …\nGet alias of address\nGet address by its identity: a type which is either an …\nGet address by its identity: a type which is either an …\nImport a keypair into the keystore.\nImport a keypair into the keystore.\nImport from a mnemonic phrase.\nImport from a mnemonic phrase.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a keypair from the keystore by its address.\nRemove a keypair from the keystore by its address.\nKeys saved as Base64 with 33 bytes <code>flag || privkey</code> …\nSign a hash with the keypair corresponding to the given …\nSign a hash with the keypair corresponding to the given …\nSign a message with the keypair corresponding to the given …\nSign a message with the keypair corresponding to the given …\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdates the alias of an existing keypair.\nUpdates the alias of an existing keypair.\nUpdates an old alias to the new alias and saves it to the …\nUpdates an old alias to the new alias. If the new_alias is …\nReturn a random name formatted as first-second from a list …\nReturn a unique collection of names.")