searchState.loadedDescShard("sui_replay_2", 0, "Build and prepare replay data\nArguments to the replay tool. It allows to replay a single …\nEnum around rpc gql endpoints.\nArguments for the (implicit) replay command.\nAn implementation of the replay interfaces: …\nUtility to diff <code>TransactionEffect</code> in a human readable …\nTransaction digest to replay.\nFile containing a list of digest, one per line.\nExecution module for replay. The call to the executor …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGQL Queries Interface to the rpc for the gql schema …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRPC of the fullnode used to replay the transaction.\nThe output directory for the replay artifacts. Defaults …\nWhether existing artifacts that were generated from a …\nLogical stores needed by the replay tool. Those stores are …\nThis module contains the logic to use transaction data and …\nShow transaction effects.\nTerminate a batch replay early if an error occurs when …\nWhether to trace the transaction execution. Generated …\nTracing utilities. Mostly deals with directory/file saving …\nThe types of artifacts that the replay tool knows about …\nManages artifacts produced by the replay tool. An …\nEncoding types for artifacts that may be output by the …\nReturns the file for the artifact, including its encoding …\nReturns the string representation of the artifact type.\nEncoding type for each artifact.\nReturns the file extension associated with the encoding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the artifact into json. This should always …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an <code>ArtifactManager</code> for this artifact type, rooted …\nCreates a new <code>ArtifactManager</code> with the given base path and …\nTry to get the GasUsageReport if the artifact type is …\nTry to get the trace reader if the artifact type is a …\nTry to get the transaction effects if the artifact type is …\nArguments for the (optional) build sub-command.\nChain ID to use for the build.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to a package which the command should be run with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEpoch data required to reaplay a transaction.\nAn <code>EpochStore</code> retrieves the epoch data and protocol …\nQuery for an object. Specifies an <code>ObjectID</code> and the rule to …\nA pasthrough query request for a store that can execute a …\nA <code>TransactionStore</code> has to be able to retrieve transaction …\nQuery options for an object. <code>Version</code> request an object at …\nReturn the <code>EpochData</code> for a given epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the <code>ProtocolConfig</code> for a given epoch.\nGiven transaction digest, return <code>TransactionData</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSaves the trace and additional metadata needed to analyze …")